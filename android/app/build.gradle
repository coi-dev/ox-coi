def localProperties = new Properties()
def localPropertiesFile = rootProject.file('local.properties')
if (localPropertiesFile.exists()) {
    localPropertiesFile.withReader('UTF-8') { reader ->
        localProperties.load(reader)
    }
}

def flutterRoot = localProperties.getProperty('flutter.sdk')
if (flutterRoot == null) {
    throw new GradleException("Flutter SDK not found. Define location with flutter.sdk in the local.properties file.")
}

def flutterVersionCode = localProperties.getProperty('flutter.versionCode')
if (flutterVersionCode == null) {
    flutterVersionCode = '1'
}

def flutterVersionName = localProperties.getProperty('flutter.versionName')
if (flutterVersionName == null) {
    flutterVersionName = '1.0'
}

apply plugin: 'com.android.application'
apply from: "$flutterRoot/packages/flutter_tools/gradle/flutter.gradle"

def keystoreProperties = new Properties()
def keystorePropertiesFile = rootProject.file('key.properties')
if (keystorePropertiesFile.exists()) {
    keystoreProperties.load(new FileInputStream(keystorePropertiesFile))
} else {
    def userHome = System.properties['user.home']
    keystoreProperties['keyAlias'] = ''
    keystoreProperties['keyPassword'] = ''
    keystoreProperties['storeFile'] = userHome + ".android/debug.keystore"
    keystoreProperties['storePassword'] = ""
}

android {
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    compileSdkVersion 28

    lintOptions {
        disable 'InvalidPackage'
    }

    defaultConfig {
        applicationId "com.openxchange.oxcoi"
        minSdkVersion 21
        targetSdkVersion 28
        versionCode flutterVersionCode.toInteger()
        versionName flutterVersionName
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
    }

    signingConfigs {
        release {
            keyAlias keystoreProperties['keyAlias']
            keyPassword keystoreProperties['keyPassword']
            storeFile file(keystoreProperties['storeFile'])
            storePassword keystoreProperties['storePassword']
        }
    }

    buildTypes {
        release {
            signingConfig signingConfigs.release
        }
    }

    flavorDimensions "configuration"

    productFlavors {
        stable {
            dimension "configuration"
            resValue "string", "app_name", "OX COI"
        }
        development {
            dimension "configuration"
            applicationIdSuffix ".dev"
            resValue "string", "app_name", "OX COI Dev"
        }
    }

    packagingOptions {
        exclude 'build-data.properties'
    }

    configurations {
        all {
            exclude group: 'org.json', module: 'json'
        }
    }

    splits {
        abi {
            enable gradle.startParameter.taskNames.any { it.contains("Release") }
            reset()
            include "armeabi-v7a", "arm64-v8a"
            universalApk true
        }
    }


}

flutter {
    source '../..'
}

dependencies {
    implementation 'com.google.crypto.tink:apps-webpush:1.3.0'
    implementation 'org.bouncycastle:bcprov-jdk16:1.46'

    testImplementation 'junit:junit:4.13'

    androidTestImplementation 'androidx.test:runner:1.2.0'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.2.0'
}

apply plugin: 'com.google.gms.google-services'
